@page "/"
@implements IAsyncDisposable

@using KBS.Cities.Shared.DTO
@using Microsoft.AspNetCore.SignalR.Client
@using KBS.Cities.Components
@using Microsoft.AspNetCore.WebUtilities
@using static Shared.Constants

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@if (_data == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container">

        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="row">
                    <div class="col col-xs-6">
                        <h3 class="panel-title">Cities</h3>
                    </div>
                    <div class="col col-xs-6 text-right">
                        <button type="button" class="btn btn-sm btn-primary btn-create" @onclick="Create"><span class="@OpenIconic.Plus"></span> Create New</button>
                        <button type="button" class="btn btn-sm btn-primary btn-create disabled" disabled @onclick="Create"><span class="oi oi-tags"></span> Filters</button>
                    </div>
                </div>
            </div>

            <div class="panel-body">
                <table class="table table-hover" data-search="true">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th width="140">Population</th>
                            <th width="120">Established</th>
                            <th width="100">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var city in _data.Data)
                        {
                            <tr>
                                <td>@city.Name</td>
                                <td width="140">
                                    <span class="@GetPopulationLabelColor(city.Population)">@city.Population</span>
                                </td>
                                <td width="120">@city.Established.ToShortDateString()</td>
                                <td width="100">
                                    <button @onclick="@(async() => await Edit(city.Id, city.Name))" class="btn btn-sm bg-primary-lt">
                                        <span class="@OpenIconic.Pencil"></span>
                                    </button>
                                    <button @onclick="@(async() => await Delete(city.Id, city.Name))" class="btn btn-sm bg-danger-lt">
                                        <span class="@OpenIconic.X"></span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="panel-footer">
                <div class="row">
                    <div class="col col-xs-4">
                        Page @_data.PageIndex of @_data.TotalPages
                    </div>
                    <div class="col col-xs-8">
                        <ul class="pagination justify-content-end">
                            <li class="page-item @(_data.HasPreviousPage ? string.Empty : Markup.Disabled)">
                                <button class="btn btn-sm page-link" disabled="@(!_data.HasPreviousPage)" @onclick="CallPreviousPage">Previous</button>
                            </li>
                            @for (var i = 1; i <= _data.TotalPages; i++)
                            {
                                var pageIndex = i;
                                <li id="prevButton" class="page-item @(pageIndex == _data.PageIndex ? Markup.Active : string.Empty)">
                                    <button @onclick="@(() => CallChangePage(pageIndex))" class="btn btn-sm page-link">@pageIndex</button>
                                </li>
                            }
                            <li class="page-item @(_data.HasNextPage ? string.Empty : Markup.Disabled)">
                                <button id="nextButton" disabled="@(!_data.HasNextPage)" class="btn btn-sm page-link" @onclick="CallNextPage">Next</button>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

    </div>
}

@code {
    private PaginatedDto<CityDto> _data;
    private int _index = 1;
    private HubConnection _hub;

    [CascadingParameter] public IModalService Modal { get; set; }

    private bool IsConnected => _hub.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        GetQueryValues();
        await ConnectToHubAsync();
        await LoadPaginated();
    }

    private void GetQueryValues()
    {
        var uri = new Uri(NavigationManager.Uri).Query;
        if (QueryHelpers.ParseQuery(uri).TryGetValue("index", out var indexValue)) int.TryParse(indexValue, out _index);
        if (_index <= 0) _index = 1;
    }

    private async Task ConnectToHubAsync()
    {
        _hub = new HubConnectionBuilder()
            .WithUrl(City.Hub)
            .Build();
        _hub.On(City.Updated, CallLoadPaginated);
        await _hub.StartAsync();
    }

    private async Task UpdateCities() => await _hub.SendAsync(City.Update);

    private void CallPreviousPage() => Task.Run(async () => await ChangePage(_index - 1));
    private void CallNextPage() => Task.Run(async () => await ChangePage(_index + 1));
    private void CallChangePage(int index) => Task.Run(async () => await ChangePage(index));
    private void CallLoadPaginated() => Task.Run(async () => await LoadPaginated());

    private async Task ChangePage(int index)
    {
        Console.WriteLine(index);
        _index = index;
        await LoadPaginated();
    }

    private async Task LoadPaginated()
    {
        var queryString = new PaginationFilterDto { PageIndex = _index }.ToQueryString();
        var response = await Http.GetAsync($"{City.EndPoint}{queryString}");
        if (response.IsSuccessStatusCode) _data = await response.Content.ReadFromJsonAsync<PaginatedDto<CityDto>>();
        else _data ??= new PaginatedDto<CityDto>();
        StateHasChanged();
    }

    private async Task Create()
    {
        var form = Modal.Show<CityModal>(City.New);
        await PostChange(form);
    }

    private async Task Edit(Guid id, string name)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(CityDto.Id), id);

        var form = Modal.Show<CityModal>(name, parameters);
        await PostChange(form);
    }

    private async Task Delete(Guid id, string name)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(CityDto.Id), id);

        var form = Modal.Show<DeleteConfirmationModal>($"Delete {name}", parameters);
        await PostChange(form);
    }

    private async Task PostChange(IModalReference form)
    {
        var result = await form.Result;
        if (IsConnected && !result.Cancelled)
        {
            await UpdateCities();
            ToastService.ShowSuccess(Toast.Ok);
        }
    }

    private string GetPopulationLabelColor(int population)
    {
        if (population.LessThan(Small))
            return Bootstrap.Badge.HoverableSecondary;
        else if (population.LessThan(Medium))
            return Bootstrap.Badge.HoverablePrimary;
        else if (population.LessThan(Large))
            return Bootstrap.Badge.HoverableInfo;

        return population.LessThan(Largest)
            ? Bootstrap.Badge.HoverableSuccess
            : Bootstrap.Badge.HoverableWarning;
    }

    public async ValueTask DisposeAsync() => await _hub.DisposeAsync();
}
