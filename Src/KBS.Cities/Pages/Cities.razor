@page "/"
@implements IAsyncDisposable

@using KBS.Cities.Shared.DTO
@using Microsoft.AspNetCore.SignalR.Client
@using KBS.Cities.Components
@using KBS.Cities.Shared.Extensions
@using Microsoft.AspNetCore.WebUtilities
@using static Shared.Constants

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@if (_data == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <h5 class="card-title p-1">Cities</h5>
            <div class="row">
                <div class="col col-sm-6">
                    <p class="card-deck"> Basic table with card </p>
                </div>
                <div class="col col-sm-6 text-right">
                    <button type="button" class="btn btn-sm btn-primary btn-create" @onclick="Create"><span class="@OpenIconic.Plus"></span> Create New</button>
                    <button type="button" class="btn btn-sm btn-primary btn-create disabled" disabled @onclick="Create"><span class="oi oi-tags"></span> Filters</button>
                </div>
            </div>
        </div>

        <div class="card-body">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th width="140">Population</th>
                        <th width="120">Established</th>
                        <th width="100">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var city in _data.Items)
                    {
                        <tr>
                            <td>
                                @city.Name
                            </td>
                            <td width="140">
                                <span class="@GetPopulationLabelColor(city.Population)">@city.Population</span>
                            </td>
                            <td width="120">@city.Established.ToShortDateString()</td>
                            <td width="100">
                                <button @onclick="@(async() => await Edit(city.Id, city.Name))" class="btn btn-sm bg-primary-lt">
                                    <span class="@OpenIconic.Pencil"></span>
                                </button>
                                <button @onclick="@(async() => await Delete(city.Id, city.Name))" class="btn btn-sm bg-danger-lt">
                                    <span class="@OpenIconic.X"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer">
            <div class="d-flex row">
                <div class="col col-4">
                    Page @_data.PageIndex of @_data.TotalPages
                </div>
                <div class="col col-8">
                    <ul class="pagination justify-content-end">
                        <li class="page-item @(_data.HasPreviousPage ? string.Empty : Markup.Disabled)">
                            <button class="btn btn-sm page-link" disabled="@(!_data.HasPreviousPage)" @onclick="CallPreviousPage">Previous</button>
                        </li>
                        @for (var i = 1; i <= _data.TotalPages; i++)
                        {
                            var pageIndex = i;
                            <li id="prevButton" class="page-item @(pageIndex == _data.PageIndex ? Markup.Active : string.Empty)">
                                <button @onclick="@(() => CallChangePage(pageIndex))" class="btn btn-sm page-link">@pageIndex</button>
                            </li>
                        }
                        <li class="page-item @(_data.HasNextPage ? string.Empty : Markup.Disabled)">
                            <button id="nextButton" disabled="@(!_data.HasNextPage)" class="btn btn-sm page-link" @onclick="CallNextPage">Next</button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private PaginatedDto<CityDto, CityPaginationFilterDto> _data;
    private int _index = 1;
    private HubConnection _hub;

    [CascadingParameter] public IModalService Modal { get; set; }

    private bool IsConnected => _hub.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        GetQueryValues();
        await ConnectToHubAsync();
        await LoadPaginated();
    }

    private void GetQueryValues()
    {
        var uri = new Uri(NavigationManager.Uri).Query;
        if (QueryHelpers.ParseQuery(uri).TryGetValue("index", out var indexValue)) int.TryParse(indexValue, out _index);
        if (_index <= 0) _index = 1;
    }

    private async Task ConnectToHubAsync()
    {
        _hub = new HubConnectionBuilder()
            .WithUrl(City.Hub)
            .Build();

        _hub.On<CityDto>(City.Added, OnAdd);
        _hub.On<CityDto>(City.Updated, OnUpdate);
        _hub.On<CityDto>(City.Deleted, OnDelete);

        await _hub.StartAsync();
    }

    private async Task Add(CityDto dto) => await _hub.SendAsync(City.Add, dto);
    private async Task Update(CityDto dto) => await _hub.SendAsync(City.Update, dto);
    private async Task Delete(CityDto dto) => await _hub.SendAsync(City.Delete, dto);

    private void OnAdd(CityDto dto)
    {
        Console.WriteLine(IsAffectedByFilters(dto));
        if (!IsAffectedByFilters(dto))
            return;

        CallLoadPaginated();
    }

    private void OnUpdate(CityDto dto)
    {
        if (!IsAffectedByFilters(dto))
            return;

        var city = _data.Items.SingleOrDefault(c => c.Id == dto.Id);
        if (city is null) return;

        var i = _data.Items.IndexOf(city);
        _data.Items[i] = dto;

        StateHasChanged();
    }

    private void OnDelete(CityDto dto)
    {
        if (!IsAffectedByFilters(dto))
            return;

        if (_data.PageIndex == _data.TotalPages)
        {
            var city = _data.Items.SingleOrDefault(c => c.Id == dto.Id);

            if (_data.Items.Count == 1) CallPreviousPage();

            if (city != null)
                _data.Items.Remove(city);
            else
                _data.Items.RemoveAt(0);

            _data.TotalItems--;

            StateHasChanged();
        }
        else
        {
            CallLoadPaginated();
        }
    }

    private void CallPreviousPage() => Task.Run(async () => await ChangePage(_index - 1));
    private void CallNextPage() => Task.Run(async () => await ChangePage(_index + 1));
    private void CallChangePage(int index) => Task.Run(async () => await ChangePage(index));
    private void CallLoadPaginated() => Task.Run(async () => await LoadPaginated());

    private async Task ChangePage(int index)
    {
        _index = index;
        await LoadPaginated();
    }

    private async Task LoadPaginated()
    {
        var queryString = new CityPaginationFilterDto { PageIndex = _index }.ToQueryString();
        var response = await Http.GetAsync($"{City.EndPoint}{queryString}");
        if (response.IsSuccessStatusCode) _data = await response.Content.ReadFromJsonAsync<PaginatedDto<CityDto, CityPaginationFilterDto>>();
        else _data ??= new PaginatedDto<CityDto, CityPaginationFilterDto>();
        StateHasChanged();
    }

    private async Task Create()
    {
        var form = Modal.Show<CityModal>(City.New);
        var result = await form.Result;

        if (result.Cancelled) return;

        var dto = (CityDto)result.Data;

        OnAdd(dto);
        if (IsConnected) await Add(dto);
    }

    private async Task Edit(Guid id, string name)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(CityDto.Id), id);

        var form = Modal.Show<CityModal>(City.New, parameters);
        var result = await form.Result;

        if (result.Cancelled) return;

        var dto = (CityDto)result.Data;

        OnUpdate(dto);
        if (IsConnected) await Update(dto);
    }

    private async Task Delete(Guid id, string name)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(CityDto.Id), id);

        var form = Modal.Show<DeleteConfirmationModal>($"Delete {name}", parameters);
        var result = await form.Result;

        if (result.Cancelled) return;

        var dto = _data.Items.Single(c => c.Id == id);

        OnDelete(dto);
        if (IsConnected) await Delete(dto);
    }

    private string GetPopulationLabelColor(int population)
    {
        if (population.LessThan(Small))
            return Bootstrap.Badge.HoverableSecondary;
        if (population.LessThan(Medium))
            return Bootstrap.Badge.HoverablePrimary;
        if (population.LessThan(Large))
            return Bootstrap.Badge.HoverableInfo;

        return population.LessThan(Largest)
            ? Bootstrap.Badge.HoverableSuccess
            : Bootstrap.Badge.HoverableWarning;
    }

    private bool IsAffectedByFilters(CityDto dto)
    {
        var filter = _data.Filter ?? new CityPaginationFilterDto();

        return filter.PopulationFrom <= dto.Population && filter.PopulationTo >= dto.Population &&
           filter.DateFrom <= dto.Established && filter.DateTo >= dto.Established &&
           dto.Name.Contains(filter.Name ?? string.Empty);
    }

    public async ValueTask DisposeAsync() => await _hub.DisposeAsync();
}
