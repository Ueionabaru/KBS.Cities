@using KBS.Cities.Shared.DTO
@using static Shared.Constants
@using System.Net
@inject HttpClient Http
@inject IToastService ToastService

<div style="width: 480px">
    @if (_dto == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="form-group">
            <div class="row pb-1">
                <label class="col-4" for="name">Name</label>
                <div class="col-8">
                    <input @bind="@_dto.Name" type="text" class="form-control w-100" id="name" />
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row pb-1">
                <label class="col-4" for="population">Population</label>
                <div class="col-8">
                    <input @bind="@_dto.Population" type="number" class="form-control w-100" id="population" />
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row pb-1">
                <label class="col-4" for="date">Established</label>
                <div class="col-8">
                    <input @bind="@_dto.Established" type="date" class="form-control w-100" id="date" />
                </div>
            </div>
        </div>

        <hr />

        <button class="btn btn-primary btn-block @(_isProcessing ? Markup.Disabled : string.Empty)"
                disabled="@(_isProcessing)"
                @onclick="CallSave">
            @if (_isProcessing)
            {
                <span class="spinner-border spinner-border-sm"></span>
                <span> Loading..</span>
            }
            else
            {
                <span>Submit</span>
            }
        </button>
        <button class="btn btn-secondary btn-block @(_isProcessing ? Markup.Disabled : string.Empty)"
                disabled="@(_isProcessing)"
                @onclick="CallCancel">
            Cancel
        </button>
    }
</div>

@code {
    [CascadingParameter] private BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] public Guid Id { get; set; }

    private CityEditDto _dto;
    private bool _isProcessing;

    protected override async Task OnInitializedAsync()
    {
        if (Id != Guid.Empty)
        {
            var response = await Http.GetAsync($"{City.EndPoint}/{Id}");
            if (response.IsSuccessStatusCode) _dto = await response.Content.ReadFromJsonAsync<CityEditDto>();
        }
        _dto ??= new CityEditDto();
    }

    private void CallSave() => Task.Run(Save);
    private void CallCancel() => Task.Run(async () => await ModalInstance.CancelAsync());

    private async Task Save()
    {
        Process();

        var content = JsonContent.Create(_dto);
        var response = Id == Guid.Empty
            ? await Http.PostAsync(City.EndPoint, content)
            : await Http.PutAsync($"{City.EndPoint}/{Id}", content);

        if (response.IsSuccessStatusCode)
            await ModalInstance.CloseAsync();

        switch (response.StatusCode)
        {
            case HttpStatusCode.NotFound:
                ToastService.ShowError("City is not found", Toast.NotFound);
                await ModalInstance.CancelAsync();
                break;
            case HttpStatusCode.BadRequest:
                ToastService.ShowError("Something went wrong", Toast.BadRequest);
                break;
        }

        Process();
    }

    private void Process()
    {
        _isProcessing = !_isProcessing;
        StateHasChanged();
    }
}
